<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Weston Liu Blog</title>
    <link>https://westonliu.com/posts/</link>
    <description>Recent content in Posts on Weston Liu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://westonliu.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lisp_tutorial</title>
      <link>https://westonliu.com/posts/lisp_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://westonliu.com/posts/lisp_tutorial/</guid>
      <description>Emacs lisp tutorial “M(Alt)-x” 输入ielm, 调出emacs shell &amp;#34;C-x C-e&amp;#34; 验证代码 Conventions (1).Some Terms “the Lisp reader” and “the Lisp printer” 指的是Lisp中将Lisp对象的文本表示转换为实际 Lisp对象的例程. (2).nil and t &amp;#34;nil&amp;#34; 有两种含意: 空 和 false 。而且 &amp;#39;() 和 nil 是相同的。 &amp;#34;t&amp;#34; 表示 true (3).Evaluation Notation 评估符号以“⇒ ”表示结果&#xA;(car &amp;#39;(1 2)) ⇒ 1 评估符号 ”≡“ 表示完全等效&#xA;(make-sparse-keymap) ≡ (list &amp;#39;keymap) (4).Printing Notation 在示例的右括号后键入 C-j ，则打印文本将插入缓冲区。&#xA;(progn (prin1 &amp;#39;foo) (princ &amp;#34;\n&amp;#34;) (prin1 &amp;#39;bar)) -|foo -|bar (5).Error Messages 1.</description>
    </item>
    <item>
      <title>Python Note</title>
      <link>https://westonliu.com/posts/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://westonliu.com/posts/python/</guid>
      <description>Learn Python Note 1.Python 出现与特点 Python 是 Guid van Rossum 在20世纪90年代研发的一种现代编程预言。&#xA;1.1.优点 1.Python的易于使用&#xA;类型与对象关联，而不是变量 ::变量可以被赋予任何类型的值,列表也可以包含许多类型的对象。这也意味 着通常不需要进行强制类型转换(type casting),代码再也不用受制于预先声 明的类型了。 python 通常可以执行更高级别的抽象操作。 ::Python通常可以执行更高级别的抽象操作。有一部分原因是源于Python语言 的构建方式,另一部分原因是Python的发行版附带了内容丰富的标准代码库,一 个下载网页的程序用两三行代码就可以写完了! 语法规则非常简单。 ::虽然成为一名专业的Python高手需要耗费很多时间和精力,但即便是初学者也 能快速获取到足够的Python语法并编写出实用的代码。 2.Python富有表现力&#xA;同样是一行代码,Python可以完成的操作比其他大多数语言都要多。表现力较强 的语言,优势十分明显,需要编写的代码越少,项目完成的速度就越快。代码越少, 程序就越容易维护和调试。 3.Python可读性好&#xA;这方面的主要优势就是利用缩进。与大多数语言不同,Python坚持要求代码块 必须整体缩进。 4.Python功能齐全&#xA;&amp;#34;batteties included&amp;#34; 理念,因其自带了很多函数库。 5.Python跨平台&#xA;Python还是一种优秀的跨平台语言,可以在很多平台上运行。 ::包括windows、Mac、Linux、UNIX等。因为它是解释型语言,相同代码可以在任何 装有Python解释器的平台上运行,而目前几乎所有平台都具备了Python的解释器 。 Python甚至还有在Java(Jython)和.NET(IronPython)中运行的版本,为运行Python提 供了更多可能的平台。 6.Python免费&#xA;Python还是免费的。自始至终,P帅on就是以开源的方式研发的,并且可以免费获取。 任一版本的Python都可自行下载和安装,并可用于开发商业或个人应用,分文不收。 1.2.缺点 1.Python不是速度最快的语言&#xA;2.Python的库不算最多&#xA;虽然Python自带了一批优秀的函数库集合,而且还有很多其他库可用,但是Python在 库的数量上并不算领先。 3.Python在编译时不检查变量类型&#xA;Python变量不像容器那样工作,而更像是引用整数、字符串、类实例等各类对象的标 签。这表示这些对象本身虽然是有类型的,但引用它们的变量并没有与类型进行绑定。 变量x可能在某一行代码中引用一个字符串,而在另一行代码中引用一个整数。 Python将类型与对象关联,而不是与变量关联,这就意味着Python解释器无法识别出变 量类型不符的错误。 4.Python对多处理器的利用不充分&#xA;现在多核处理器已经普及,在很多情况下也都会带来性能的明显提升。但是,由于具有 名为全局解释器锁(global inte印reter lock , GIL)的特性,Python的标准版本并没 有按照多内核来进行设计。详情请查看David Beazley、La叮Hastings等人关于GIL的 讨论视频,或者访问Python wiki里的GIL页面。尽管用Python可以运行并发进程,但如 果需要“开箱即用”的并发能力,Python可能并不合适。 2.</description>
    </item>
  </channel>
</rss>
